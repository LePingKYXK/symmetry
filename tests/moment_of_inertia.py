#!/usr/bin/env python3

import itertools as it
import numpy as np
import sympy as sy
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D



#### https://www.ciaaw.org/atomic-weights.htm
#### https://www.nist.gov/pml/atomic-weights-and-isotopic-compositions-relative-atomic-masses
dic_periodic_table = {
"H" :[1  , 1.00784],
"He":[2  , 4.002602],
"Li":[3  , 6.938 ],
"Be":[4  , 9.0121831],
"B" :[5  , 10.806],
"C" :[6  , 12.0096],
"N" :[7  , 14.00643],
"O" :[8  , 15.99903],
"F" :[9  , 18.998403163],
"Ne":[10 , 20.1797],
"Na":[11 , 22.98976928],
"Mg":[12 , 24.304],
"Al":[13 , 26.9815384],
"Si":[14 , 28.084],
"P" :[15 , 30.973761998],
"S" :[16 , 32.059],
"Cl":[17 , 35.446],
"Ar":[18 , 39.792],
"K" :[19 , 39.0983],
"Ca":[20 , 40.078],
"Sc":[21 , 44.955908],
"Ti":[22 , 47.867],
"V" :[23 , 50.9415],
"Cr":[24 , 51.9961],
"Mn":[25 , 54.938043],
"Fe":[26 , 55.845],
"Co":[27 , 58.933194],
"Ni":[28 , 58.6934],
"Cu":[29 , 63.546],
"Zn":[30 , 65.38],
"Ga":[31 , 69.723],
"Ge":[32 , 72.630],
"As":[33 , 74.921595],
"Se":[34 , 78.971],
"Br":[35 , 79.901],
"Kr":[36 , 83.798],
"Rb":[37 , 85.4678],
"Sr":[38 , 87.62],
"Y" :[39 , 88.90584],
"Zr":[40 , 91.224],
"Nb":[41 , 92.90637],
"Mo":[42 , 95.95],
"Tc":[43 , 98.],
"Ru":[44 , 101.07],
"Rh":[45 , 102.90549],
"Pd":[46 , 106.42],
"Ag":[47 , 107.8682],
"Cd":[48 , 112.414],
"In":[49 , 114.818],
"Sn":[50 , 118.710],
"Sb":[51 , 121.760],
"Te":[52 , 127.60],
"I" :[53 , 126.90447],
"Xe":[54 , 131.293],
"Cs":[55 , 132.90545196],
"Ba":[56 , 137.327],
"La":[57 , 138.90547],
"Ce":[58 , 140.116],
"Pr":[59 , 140.90766],
"Nd":[60 , 144.242],
"Pm":[61 , 145.],
"Sm":[62 , 150.36],
"Eu":[63 , 151.964],
"Gd":[64 , 157.25],
"Tb":[65 , 158.925354],
"Dy":[66 , 162.500],
"Ho":[67 , 164.930328],
"Er":[68 , 167.259],
"Tm":[69 , 168.934218],
"Yb":[70 , 173.045],
"Lu":[71 , 174.9668],
"Hf":[72 , 178.486],
"Ta":[73 , 180.94788],
"W" :[74 , 183.84],
"Re":[75 , 186.207],
"Os":[76 , 190.23],
"Ir":[77 , 192.217],
"Pt":[78 , 195.084],
"Au":[79 , 196.966570],
"Hg":[80 , 200.592],
"Tl":[81 , 204.382],
"Pb":[82 , 207.2],
"Bi":[83 , 208.98040],
"Po":[84 , 209.],
"At":[85 , 210.],
"Rn":[86 , 222.],
"Fr":[87 , 223.],
"Ra":[88 , 226.],
"Ac":[89 , 227.],
"Th":[90 , 232.0377],
"Pa":[91 , 231.03588],
"U" :[92 , 238.02891],
"Np":[93 , 237.],
"Pu":[94 , 244.],
"Am":[95 , 243.],
"Cm":[96 , 247.],
"Bk":[97 , 247.],
"Cf":[98 , 251.],
"Es":[99 , 252.],
"Fm":[100, 257.],
"Md":[101, 258.],
"No":[102, 259.],
"Lr":[103, 266.],
"Rf":[104, 267.],
"Db":[105, 268.],
"Sg":[106, 271.],
"Bh":[107, 270.],
"Hs":[108, 269.],
"Mt":[109, 278.],
"Ds":[110, 281.],
"Rg":[111, 282.],
"Cn":[112, 285.],
"Nh":[113, 286.],
"Fl":[114, 289.],
"Mc":[115, 289.],
"Lv":[116, 293.],
"Ts":[117, 294.],
"Og":[118, 294.]}


def symbol_to_mass(coord):
    """ This function replace the element symbols i.e. the first
    column of Corrdinates to the corresponding mass. Then return
    the new Corrdinates.
    
    ------------------------
    For instance, the input is
    NH3 = ["N",  0.0   ,   0.0   ,   0.0   ],
          ["H",  0.0   ,  -0.9377,  -0.3816],
          ["H",  0.8121,   0.4689,  -0.3816],
          ["H", -0.8121,   0.4689,  -0.3816]]
    ==>>
    output = [[14.0067,   0.    ,   0.    ,   0.     ],
              [1.00797,   0.    ,  -0.9377,  -0.3816 ],
              [1.00797,   0.8121,   0.4689,  -0.3816 ],
              [1.00797,  -0.8121,   0.4689,  -0.3816 ]] 
    """
    for i in coord:
        if i[0] in dic_periodic_table.keys():
            i[0] = dic_periodic_table[i[0]][1]
    return np.asfarray(coord)


def calc_geom_center(array):
    """  This function calculates the geometry center of a given data array.
    The format of the input data array is a two dimensional array, which
    contains the x, y, z Cartesion coordinates.
    It returns a 1-D data array.
    """
    return np.average(array, axis=0)


def calc_center_of_mass(array):
    """  This function calculates the center of mass of a given data array.
    The the input data array is a two dimensional array, containing the 
    x, y, z Cartesion coordinates and their corresponding mass values.
    It returns a 1-D data array.
    """
    return np.average(array[:,1:], axis=0, weights=array[:,0])


def calc_inertia_tensor(array, mass):
    """  This function calculates the Elements of inertia tensor for the
    moved centered coordinates.
    
    The structure of the array is a two dimensional array, which contains
    the mass of elements (the first column) and their corresponded x, y, z
    Cartesion coordinates.
    """
    I_xx = (mass * np.sum(np.square(array[:,1:3:1]),axis=1)).sum()
    I_yy = (mass * np.sum(np.square(array[:,0:3:2]),axis=1)).sum()
    I_zz = (mass * np.sum(np.square(array[:,0:2:1]),axis=1)).sum()
    I_xy = (-1 * mass * np.prod(array[:,0:2:1],axis=1)).sum()
    I_yz = (-1 * mass * np.prod(array[:,1:3:1],axis=1)).sum()
    I_xz = (-1 * mass * np.prod(array[:,0:3:2],axis=1)).sum()
    I = np.array([[I_xx, I_xy, I_xz],
		  [I_xy, I_yy, I_yz],
		  [I_xz, I_yz, I_zz]])
    return I


def find_principal_axes(array):
    """  This function finds the principal axes (I_a, I_b, I_c) by using
    diagonalizing the inertia tensor.
    """
    eig_val, eig_vec = np.linalg.eigh(array)
    print("The eigen values are \n{:}\n".format(eig_val))
    D = np.linalg.multi_dot([np.linalg.inv(eig_vec), array, eig_vec])
    D = np.around(D, decimals=4)
    return eig_vec, D, np.diag(D)


def calc_distance(coord):
    """ This function calculates the distances between each atoms in 
    the . 
    """
    diff = coord[:,np.newaxis,:] - coord[np.newaxis,:,:]
    return np.linalg.norm(diff, axis=-1)


def classify_molecule(I_abc):
    Ia, Ib, Ic = I_abc
    if np.isclose(Ia, Ib):
        if np.isclose(Ib, Ic):
            return "Spherical top"
        return "Oblate symmetric top"
    if np.isclose(Ib, Ic):
        if Ia == 0:
            return "Linear molecule"
        return "Prolate symmetric top"
    return "Asymmetric top"


def visualization(CoM_coord, eig_vec, new_coord):
    fig = plt.figure(figsize=(8,8))
    ax = fig.add_subplot(111, projection='3d')
    vlen = np.linalg.norm(eig_vec)
    X, Y, Z = CoM_coord
    U, V, W = eig_vec
    ax.quiver(X, Y, Z, U, V, W, pivot='tail',
              length=vlen, arrow_length_ratio=0.2/vlen)

    ax.scatter(new_coord[:,0], new_coord[:,1], new_coord[:,2],
               color="r", marker="o", s=50)
    
    ax.get_proj = lambda: np.dot(Axes3D.get_proj(ax), np.diag([0.75, 0.75, 1, 1]))
    ax.set_xlim([new_coord.min(),new_coord.max()])
    ax.set_ylim([new_coord.min(),new_coord.max()])
    ax.set_zlim([new_coord.min(),new_coord.max()])
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_zlabel('z')
    plt.show()
    

def main(data_array):
    """
    workflow
    """
    print("Input coordinates = \n{:}\n".format(data_array))

    data_array = symbol_to_mass(data_array)
    print("replaced coordinates = \n{:}\n".format(data_array))
          
    CoM_coord = calc_center_of_mass(data_array)
    print("Center of Mass = \n{:}\n".format(CoM_coord))
    
    new_coord = data_array[:,1:] - CoM_coord
    print("shifted coordinates = \n{:}\n".format(np.column_stack((data_array[:,0],
                                                                  new_coord))))
    CoM_coord = calc_center_of_mass(np.column_stack((data_array[:,0],
                                                     new_coord)))
    print("Center of Mass = \n{:}\n".format(CoM_coord))

    GC_coord = calc_geom_center(new_coord)
    print("Geometry Center = \n{:}\n".format(GC_coord))
    print("overlap or not? {:}\n".format(np.allclose(CoM_coord, GC_coord, rtol=1e-6)))
    
    I = calc_inertia_tensor(new_coord, data_array[:,0])
    
    eig_vec, D, I_abc = find_principal_axes(I)
    mol_type = classify_molecule(I_abc)
    
    dist_matrix = calc_distance(np.row_stack((CoM_coord,new_coord)))
    return I, eig_vec, D, I_abc, mol_type, CoM_coord, new_coord, dist_matrix



###############################################################################
###########################    examples for test    ###########################
## H2O
##a = [
##["O",    0.00000000,    0.00000000,   -0.11081188],
##["H",    0.00000000,   -0.78397589,    0.44324750],
##["H",   -0.00000000,    0.78397589,    0.44324750]]


#### H2O2
##a = [
##["H",   -1.11122905,    0.58364616,    0.40219369],
##["O",   -0.64803507,   -0.12510213,   -0.05027421],
##["O",    0.64803507,    0.12510213,   -0.05027421],
##["H",    1.11122905,   -0.58364616,    0.40219369]]


#### NH3
##a = [ 
##["N",  0.    ,   0.    ,   0.    ],
##["H",  0.    ,  -0.9377,  -0.3816],
##["H",  0.8121,   0.4689,  -0.3816],
##["H", -0.8121,   0.4689,  -0.3816]]


#### CH3Cl
##a = [
##["C" ,  0.    ,   0.    ,   0.    ], 
##["Cl",  0.    ,   0.    ,   1.7810],
##["H" ,  1.0424,   0.    ,  -0.3901],
##["H" , -0.5212,   0.9027,  -0.3901],
##["H" , -0.5212,  -0.9027,  -0.3901]]


#### HCl
##a = [
##["Cl",     0.80717486,   -0.71001494,    0.00000000],
##["H" ,    -0.48282514,   -0.71001494,    0.00000000]]


#### HCN
##a = [
##["C",   0.00000000,   0.00000000,   -0.49687143],
##["H",   0.00000000,   0.00000000,   -1.56687143],
##["N",   0.00000000,   0.00000000,    0.64972857]]


#### CO2
##a = [
##["C",     -0.39214687,   -0.78171310,    0.01418586],
##["O",     -1.65054687,   -0.78171310,    0.01418586],
##["O",      0.86625313,   -0.78171310,    0.01418586]]


#### C2H2
##a = [
##["C",   -0.00000000,   -0.00000000,   -0.60060000],
##["H",   -0.00000000,   -0.00000000,   -1.67060000],
##["C",    0.00000000,   -0.00000000,    0.60060000],
##["H",    0.00000000,   -0.00000000,    1.67060000]]


#### CH4
##a = [
##["C",   0.    ,   0.    ,   0.    ],
##["H",   0.6276,   0.6276,   0.6276],
##["H",   0.6276,  -0.6276,  -0.6276],
##["H",  -0.6276,   0.6276,  -0.6276],
##["H",  -0.6276,  -0.6276,   0.6276]]


#### C2H4
##a = [
##["C",    0.00000000,   -0.67759997,   0.00000000],
##["H",    0.92414474,   -1.21655197,   0.00000000],
##["H",   -0.92414474,   -1.21655197,   0.00000000],
##["C",    0.00000000,    0.67759997,   0.00000000],
##["H",   -0.92414474,    1.21655197,   0.00000000],
##["H",    0.92414474,    1.21655197,   0.00000000]]


#### C6H6
##a = [
##["C",    0.00000000,   1.39499067,   0.00000000],
##["C",   -1.20809736,   0.69749534,   0.00000000],
##["C",   -1.20809736,  -0.69749534,   0.00000000],
##["C",    0.00000000,  -1.39499067,   0.00000000],
##["C",    1.20809736,  -0.69749533,   0.00000000],
##["C",    1.20809736,   0.69749534,   0.00000000],
##["H",    0.00000000,   2.49460097,   0.00000000],
##["H",   -2.16038781,   1.24730049,   0.00000000],
##["H",   -2.16038781,  -1.24730049,   0.00000000],
##["H",    0.00000000,  -2.49460097,   0.00000000],
##["H",    2.16038781,  -1.24730048,   0.00000000],
##["H",    2.16038781,   1.24730049,   0.00000000]]


#### coronene
##a = [
##["C",    0.68444198,   -3.67907288,    0.00000000],
##["C",    1.41889714,   -2.45760193,   -0.00000000],
##["C",    0.71456145,   -1.23765674,    0.00000000],
##["C",   -0.71456145,   -1.23765674,    0.00000000],
##["C",   -1.41889714,   -2.45760193,   -0.00000000],
##["C",   -0.68444198,   -3.67907288,    0.00000000],
##["C",    1.42912290,   -0.00000000,    0.00000000],
##["C",   -1.42912290,   -0.00000000,    0.00000000],
##["C",   -0.71456145,    1.23765674,    0.00000000],
##["C",    0.71456145,    1.23765674,    0.00000000],
##["C",   -1.41889714,    2.45760193,   -0.00000000],
##["C",   -2.84394959,    2.43228059,   -0.00000000],
##["C",   -3.52839157,    1.24679229,    0.00000000],
##["C",   -2.83779428,   -0.00000000,   -0.00000000],
##["C",   -3.52839157,   -1.24679229,   -0.00000000],
##["C",   -2.84394959,   -2.43228059,    0.00000000],
##["H",   -3.38312959,   -3.39195178,    0.00000000],
##["H",   -4.62908120,   -1.23390028,   -0.00000000],
##["H",    1.24595161,   -4.62585206,    0.00000000],
##["H",   -1.24595161,   -4.62585206,    0.00000000],
##["H",   -3.38312959,    3.39195178,   -0.00000000],
##["H",   -4.62908120,    1.23390028,    0.00000000],
##["C",    2.84394959,   -2.43228059,   -0.00000000],
##["C",    3.52839157,   -1.24679229,    0.00000000],
##["C",    2.83779428,   -0.00000000,   -0.00000000],
##["H",    3.38312959,   -3.39195178,   -0.00000000],
##["H",    4.62908120,   -1.23390028,    0.00000000],
##["C",    3.52839157,    1.24679229,   -0.00000000],
##["C",    2.84394959,    2.43228059,    0.00000000],
##["C",    1.41889714,    2.45760193,   -0.00000000],
##["H",    4.62908120,    1.23390028,   -0.00000000],
##["H",    3.38312959,    3.39195178,    0.00000000],
##["C",   -0.68444198,    3.67907288,    0.00000000],
##["H",   -1.24595161,    4.62585206,    0.00000000],
##["C",    0.68444198,    3.67907288,   -0.00000000],
##["H",    1.24595161,    4.62585206,   -0.00000000]]


#### O3
##a = [
##["O",  0.     ,  0.    ,   0.    ], 
##["O",  0.     ,  1.0885,   0.6697],
##["O",  0.     , -1.0885,   0.6697]]


#### additional test 1, CH4
##a = [
##["C",   0.38000200,  -0.60132300,   0.00000000],
##["H",   0.73665643,  -1.61013300,   0.00000000],
##["H",   0.73667484,  -0.09692481,   0.87365150],
##["H",   0.73667484,  -0.09692481,  -0.87365150],
##["H",  -0.68999800,  -0.60130982,   0.00000000]]


#### additional test 2, CH4
##a = [
##["C",  -0.79222718,  -0.63527652,   0.00000000],
##["H",  -0.43557275,  -1.64408653,   0.00000000],
##["H",  -0.43555434,  -0.13087833,   0.87365150],
##["H",  -0.43555434,  -0.13087833,  -0.87365150],
##["H",  -1.86222718,  -0.63526334,   0.00000000]]


#### additional test 3, CH4
a = [
["C",   0.00000000,   0.00000000,   0.00000000],
["H",   0.00000000,   0.00000000,   1.06999995],
["H",   0.00000000,  -1.00880563,  -0.35666665],
["H",  -0.87365130,   0.50440282,  -0.35666665],
["H",   0.87365130,   0.50440282,  -0.35666665]]


#### additional test 3, H+(H2O)3
##a = [
##[1., -3.2613969123, -0.6233043579,  0.6815344812],
##[8., -2.3118608248,  0.1524013963,  0.3721500130],
##[1., -2.4249335008,  1.1246183202,  0.5593911943],
##[1., -1.3879971070, -0.1199181966,  0.5339250450],
##[8., -4.1314389181, -1.3181125941,  0.9221572855],
##[1., -4.5674163396, -1.8124710340,  0.1092317735],
##[1., -4.8504251361, -0.9024403801,  1.4286443588],
##[8., -2.5784277579,  2.7229822690,  0.6792296664],
##[1., -2.0669892287,  3.2901453187,  1.2682654734],
##[1., -2.6225421443,  3.1817005533, -0.1780402515],
##[8., -5.2320263518, -2.6028173405, -0.9795639123],
##[1., -5.2438622059, -3.5703373453, -1.0121644518],
##[1., -5.2212197080, -2.2977914822, -1.8921589996]]


#### additional test 4, C60
##a = [
##["C",   -0.67264571,   -0.47085201,    0.00000000],
##["C",    0.79124329,   -0.47085201,    0.00000000],
##["C",    1.48353229,    0.72834599,    0.00000000],
##["C",    0.75155029,    1.99610399,   -0.00001900],
##["C",   -0.63311771,    1.99607199,    0.00000500],
##["C",   -1.36502371,    0.72827699,    0.00002100],
##["C",   -1.12502571,   -1.57723701,   -0.84514300],
##["C",    0.05926029,   -2.26098901,   -1.36751300],
##["C",    1.24362029,   -1.57719701,   -0.84518700],
##["C",    2.36379129,   -1.42449601,   -1.64467700],
##["C",    2.66778729,    0.88976899,   -0.84525000],
##["C",    1.48343629,    2.94102799,   -0.84526500],
##["C",    0.79103329,    3.83480599,   -1.64470200],
##["C",   -0.67285971,    3.83478299,   -1.64464800],
##["C",   -1.36512571,    2.94097899,   -0.84515400],
##["C",   -2.54944771,    2.25717199,   -1.36745400],
##["C",   -2.54938571,    0.88965499,   -0.84510200],
##["C",   -2.97729171,   -0.15684501,   -1.64450700],
##["C",   -2.24529471,   -1.42460401,   -1.64452900],
##["C",    0.05920829,   -2.75509401,   -2.66101900],
##["C",   -1.12511771,   -2.59372601,   -3.50614400],
##["C",   -2.24533171,   -1.94696801,   -3.01203600],
##["C",   -2.97734571,   -1.00206001,   -3.85720300],
##["C",   -3.42971571,    0.10429199,   -3.01201000],
##["C",   -3.42976771,    1.39780999,   -3.50610800],
##["C",   -2.97740171,    2.50418499,   -2.66095700],
##["C",   -2.24551671,    3.44914799,   -3.50619100],
##["C",   -1.12528971,    4.09595099,   -3.01217300],
##["C",    2.66772629,    2.25730299,   -1.36763700],
##["C",    1.24329029,    3.07948799,   -5.67325800],
##["C",    2.36356029,    2.92686599,   -4.87388600],
##["C",    3.09553329,    1.65911499,   -4.87388000],
##["C",    2.66763129,    0.61261999,   -5.67330600],
##["C",    1.48330129,    0.77399899,   -6.51843700],
##["C",   -0.67298171,    1.97310399,   -6.51837200],
##["C",   -1.12535071,    3.07946299,   -5.67318700],
##["C",    0.05895829,    3.76326399,   -5.15088600],
##["C",    0.05899529,    4.25736199,   -3.85737800],
##["C",    1.24335429,    4.09596699,   -3.01221300],
##["C",    2.36358029,    3.44922999,   -3.50632700],
##["C",    3.54792829,    1.39796499,   -3.50637300],
##["C",    3.54798529,    0.10447499,   -3.01226300],
##["C",    3.09559229,   -1.00192601,   -3.85740200],
##["C",    2.66766429,   -0.75490501,   -5.15092200],
##["C",    1.48338029,   -1.43870101,   -5.67323000],
##["C",    0.75137829,   -0.49380101,   -6.51838300],
##["C",   -0.63329171,   -0.49381701,   -6.51832700],
##["C",   -1.36527871,    0.77393299,   -6.51833200],
##["C",   -2.24555171,    2.92676999,   -4.87370400],
##["C",   -2.97745071,    1.65897699,   -4.87365800],
##["C",   -2.54956571,    0.61250099,   -5.67310300],
##["C",   -2.54951071,   -0.75502701,   -5.15073900],
##["C",   -1.36518371,   -1.43877001,   -5.67312600],
##["C",   -0.67279571,   -2.33254901,   -4.87371500],
##["C",    0.79109729,   -2.33252301,   -4.87374700],
##["C",    1.24351229,   -2.59365501,   -3.50626500],
##["C",    2.36373329,   -1.94685601,   -3.01222400],
##["C",    3.09555529,    2.50434699,   -2.66118400],
##["C",    3.09567029,   -0.15669501,   -1.64469900],
##["C",    0.79092629,    1.97314199,   -6.51840400]]
###############################################################################

    

if __name__ == "__main__":
    I, eig_vec, D, I_abc, mol_type, CoM_coord, new_coord, dist_matrix = main(a)
    print("The inertia_tensor I is \n{:}\n".format(I))
    print("The diagonalized I is \n{:}\n".format(D))
    print("The molecule is {:}".format(mol_type))
    print("I_a = {:}\nI_b = {:}\nI_c = {:}\n".format(*I_abc))
    print("The eigen vectors are \n{:}\n".format(eig_vec))
    print("The center of mass \n{:}\n".format(CoM_coord))
    print("The shifted coordinates \n{:}\n".format(new_coord))
    print("The distance matrix \n{:}\n".format(dist_matrix))
    visualization(CoM_coord, eig_vec, new_coord)
